name: CI

on:
  push:
    branches: [spencers,master]
  pull_request:
    branches: [ spencers,master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'
    
    - name: Clean build cache
      run: npm cache clean --force

    - name: Install dependencies
      run: cd client && npm ci

    - name: Run tests
      run: cd client && npm test

    # - name: Run linter
    #   run: npm run lint

    - name: Build
      run: npm run build       

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Replace with your AWS region
    
    - name: Set deployment environment
      run: |
        if [ ${{ github.ref }} == 'refs/heads/main' ]; then
          echo "DEPLOY_ENV=main" >> $GITHUB_ENV
        elif [ ${{ github.ref }} == 'refs/heads/spencers' ]; then
          echo "DEPLOY_ENV=spencers" >> $GITHUB_ENV
        elif [ ${{ github.ref }} == 'refs/heads/master' ]; then
          echo "DEPLOY_ENV=master" >> $GITHUB_ENV
        fi

    - name: Deploy to AWS Staging
      run: |
        # Add your AWS CLI commands here to deploy to staging
        # For example, if using Elastic Beanstalk:
        # aws elasticbeanstalk create-application-version --application-name YourAppName --version-label ${{ github.sha }}
        # aws elasticbeanstalk update-environment --environment-name YourStagingEnvName --version-label ${{ github.sha }}
        echo "Deploying to AWS Staging Environment"

  # deploy-production:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - uses: actions/checkout@v2
    
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1  # Replace with your AWS region

  #   - name: Deploy to AWS Production
  #     run: |
  #       # Add your AWS CLI commands here to deploy to production
  #       # For example, if using Elastic Beanstalk:
  #       # aws elasticbeanstalk create-application-version --application-name YourAppName --version-label ${{ github.sha }}
  #       # aws elasticbeanstalk update-environment --environment-name YourProductionEnvName --version-label ${{ github.sha }}
  #       echo "Deploying to AWS Production Environment"

name: CI

on:
  push:
    branches: [ main, spencers, master ]
  pull_request:
    branches: [ main, spencers, master ]

permissions:
  id-token: write # This is required for requesting the JWT

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'
    
    - name: Clean build cache
      run: npm cache clean --force

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    # - name: Run linter
    #   run: npm run lint

    - name: Build
      run: npm run build       

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/spencers' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::503561421170:role/github.to.aws
        aws-region: us-east-1  
    
    - name: Set deployment environment
      run: |
          if [ ${{ github.ref }} == 'refs/heads/main' ]; then
            echo "DEPLOY_ENV=main" >> $GITHUB_ENV
            echo "EB_ENVIRONMENT=main-staging" >> $GITHUB_ENV
          elif [ ${{ github.ref }} == 'refs/heads/spencers' ]; then
            echo "DEPLOY_ENV=spencers" >> $GITHUB_ENV
            echo "EB_ENVIRONMENT=spencers-staging" >> $GITHUB_ENV
          elif [ ${{ github.ref }} == 'refs/heads/master' ]; then
            echo "DEPLOY_ENV=master" >> $GITHUB_ENV
            echo "EB_ENVIRONMENT=master-staging" >> $GITHUB_ENV
          fi

    - name: Deploy to AWS Elastic Beanstalk Staging
      run: |
        echo "Deploying to AWS Elastic Beanstalk Staging Environment: ${{ env.EB_ENVIRONMENT }}"
        # Create a new application version
        aws elasticbeanstalk create-application-version \
          --application-name POSView-Group \
          --version-label ${{ github.sha }} \
          --source-bundle S3Bucket="your-s3-bucket",S3Key="your-app-${{ github.sha }}.zip"
        
        # Update the environment with the new version
        aws elasticbeanstalk update-environment \
          --environment-name ${{ env.EB_ENVIRONMENT }} \
          --version-label ${{ github.sha }}

  # deploy-production:
  #   - name: Deploy to AWS Production
  #     run: |
  #       # Add your AWS CLI commands here to deploy to production
  #       # For example, if using Elastic Beanstalk:
  #       # aws elasticbeanstalk create-application-version --application-name YourAppName --version-label ${{ github.sha }}
  #       # aws elasticbeanstalk update-environment --environment-name YourProductionEnvName --version-label ${{ github.sha }}
  #       echo "Deploying to AWS Production Environment"